#+TITLE: Emacs Configuration
#+AUTHOR: Dan Murphy
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :mkdirp yes

* Introduction

This Org Mode document generates the Emacs configuration file [[file:init.el][init.el]].

#+begin_src emacs-lisp

  ;; NOTE: Do not edit this file directly: init.el is generated from Emacs.org.
  ;; Edit that file in Emacs and run org-bable-tangle (C-c C-v C-t) to update
  ;; init.el automatically.

#+end_src

* Package System Setup

Emacs has a built-in package manager, but [[https://github.com/jwiegley/use-package][use-package]] makes configuration and loading of packages much easier.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Automatic Package Updates

The auto-package-update package helps keep your Emacs packages up to date.  It will prompt you after a certain number of days, either at startup or at a specific time of day, to remind you to update your packages.

You can also update at any time using =M-x auto-package-update-now=.

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results nil)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keybindings

[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi layer for Emacs. It emulates the main features of Vim, turning Emacs into a modal editor. [[https://github.com/emacs-evil/evil-collection][Evil Collection]] provides additional bindings for the parts of Emacs that Evil does not cover. [[https://github.com/emacs-evil/evil-surround][Evil Surround]] emulates Tim Pope's [[https://github.com/tpope/vim-surround][surround.vim]] plugin.

[[https://github.com/noctuid/general.el][General]] provides a convenient method for adding keybindings; in particular, we can use General to return to normal state with 'jk'.

I want =C-u= to follow Vim's behaviour: scroll up by half a screen in normal state, delete back to indentation in insert state. By default, however, =C-u= is bound in Emacs to the =universal-argument= prefix, which you may want to rebind to something else.

Evil can be use one of three undo systems:
  - =undo-fu=, in which case the [[https://gitlab.com/ideasman42/emacs-undo-fu][Undo Fu]] package must be installed;
  - =undo-tree=, in which case the [[https://www.dr-qubit.org/undo-tree.html][Undo Tree]] package must be installed and =undo-tree-mode= must be activated;
  - =undo-redo=, which uses commands natively available in Emacs 28.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-evil-setup t)
    (general-imap "j"
      (general-key-dispatch 'self-insert-command
        :timeout 0.25
        "k" 'evil-normal-state)))

  ;; If you switch to undo-redo in Emacs 28, you can remove the following line
  (use-package undo-fu)

  (use-package evil
    :init
    (setq evil-want-integration t   ; required by evil-collection
          evil-want-keybinding nil  ; required by evil-collection
          evil-want-Y-yank-to-eol t
          evil-want-C-u-delete t
          evil-want-C-u-scroll t
          evil-undo-system 'undo-fu)  ; try undo-redo when Emacs 28 is released
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

#+end_src

* Appearance and Interface

** Basic Interface Settings

Unnecesary visual elements have been disabled, but the menu bar can be helpful while you're learning Emacs, so you may wish to leave it enabled. Alternatively, you can toggle the use of the menu bar with =M-x menu-bar-mode=.

#+begin_src emacs-lisp

  ;; Set default dimensions for new frames
  (add-to-list 'default-frame-alist '(width . 101))
  (add-to-list 'default-frame-alist '(height . 51))

  ;; Disable startup screen
  (setq inhibit-startup-message t) 

  ;; Disable the menu bar, scroll bar, tool bar and tooltips
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)

  (set-fringe-mode 10)  ; Set left and right margins

  (global-visual-line-mode 1)  ; Visually wrap long lines

  (blink-cursor-mode 0)  ; Disable blinking cursor

  ;; Enable line numbers globally, then disable them for specific modes
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)

  (dolist (mode '(eshell-mode-hook
                  shell-mode-hook
                  term-mode-hook
                  vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Fonts

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Iosevka" :height 160)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 160)
  (set-face-attribute 'variable-pitch nil :font "Lato" :height 160)

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is an excellent collection of high-quality themes with support for many different Emacs modes. Take a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] to find one you like. I'll also add the excellent [[https://www.nordtheme.com/ports/emacs][Nord theme]]. You can quickly switch between themes with =M-x counsel-load-theme=.

[[https://github.com/hlissner/emacs-solaire-mode][Solaire mode]] helps to visually distinguish "real" buffers (that is, the file-visiting code buffers where you do most of your work) from "unreal" buffers (popups, sidebars, log buffers, terminals, etc.) by giving the latter a slightly different (lighter or darker) background.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-one t))

  (use-package nord-theme)

  (use-package solaire-mode
    :config (solaire-global-mode +1))

#+end_src

** Parenthesis Matching
   
Show Paren mode highlights matching delimiters. [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] makes it easier to visually match brackets and parentheses in code buffers.

#+begin_src emacs-lisp

  (show-paren-mode 1)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Indentation Guides

[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] adds visual guides for indentation levels. Toggle with =M-x highlight-indent-guides-mode= (you may want to set up a binding for this).

#+begin_src emacs-lisp

  (use-package highlight-indent-guides
    :hook (c-mode-common . highlight-indent-guides-mode)
    :config (setq highlight-indent-guides-method 'character
                  highlight-indent-guides-responsive 'nil))

#+end_src

** Mode Line

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive mode-line configuration. The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode-line icons display correctly.

#+begin_src emacs-lisp

  ;; Display column number in mode line
  (column-number-mode)

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 40)
             (doom-modeline-indent-info t)))

  (set-face-attribute 'mode-line nil :font "Source Sans Pro" :height 160)
  (set-face-attribute 'mode-line-inactive nil :font "Source Sans Pro" :height 160)

#+end_src

** Completion System

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

#+end_src

** Help System

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))

#+end_src

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Basic Editing Settings

Don't make backup files.
Default to an indentation of 2 spaces, and use spaces instead of tabs (a.k.a. 'soft' tabs).

#+begin_src emacs-lisp

  (setq make-backup-files nil)

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
  (setq-default indent-tabs-mode nil)

#+end_src

Electric Pair mode is analagous to the Autopair package for Vim.

#+begin_src emacs-lisp

  (electric-pair-mode 1)

  ;; Disable <> auto-pairing
  (setq electric-pair-inhibit-predicate
    `(lambda (c)
      (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))

#+end_src

* Dired

Dired is Emacs's excellent file manager. With the [[https://github.com/crocket/dired-single][dired-single]] package, Emacs will reuse existing Dired buffers instead of spawning new ones.

[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] adds Dired support to all-the-icons. If you use Treemacs, an alternative is [[https://github.com/Alexander-Miller/treemacs#treemacs-icons-dired][treemacs-icons-dired]].

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (setq delete-by-moving-to-trash t)
    (define-key dired-mode-map [remap dired-find-file]
      'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
      'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
      'dired-single-up-directory)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  ;;(use-package all-the-icons-dired
  ;;  :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; The following line doesn't work as expected:
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("pdf" . "okular")
                                  ("png" . "gwenview")
                                  ("mkv" . "vlc"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Shells & Terminals

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is a terminal emulator for Emacs based on [[https://github.com/neovim/libvterm][libvterm]], a C library developped by the Neovim project. Compared to term and ansi-term (Emacs's built-in terminal emulators), vterm provides much better performance, as well as superior compatibility with terminal applications.

Before installing vterm, make sure your system has the required packages installed. On an Arch-based system, these are =cmake=, =libtool= and (optionally) =libvterm=. Also, be sure to read the [[https://github.com/akermu/emacs-libvterm/#shell-side-configuration][Shell-side configuration]] and [[https://github.com/akermu/emacs-libvterm/#directory-tracking-and-prompt-tracking][Directory tracking and Prompt tracking]] sections of the vterm README: you need to add the =vterm_printf= and =vterm_prompt_end= functions to your shell's configuration file (=.bashrc= or =.zshrc=).

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 1000))

#+end_src

** eshell

/TODO./ eshell is a Bash-like shell written in elisp. Though slower than vterm and lacking some features of bash and zsh, it offers superior Emacs integration and a consistent experience across all OSes.

* Version Control

** Magit

[[https://magit.vc/][Magit]] is an outstanding Git interface for Emacs. [[https://github.com/magit/forge][Forge]] allows you to work with Git forges, such as GitHub and GitLab, from the comfort of Magit and the rest of Emacs.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  ; (use-package forge
  ;   :after magit)

#+end_src

* Org Mode

** Font Settings

The =efs/org-font-setup= function adjusts the sizes of headings and uses variable-width fonts in most cases so that it looks more like we're editing a document. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.6)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Lato" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-document-info-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
   
** Basic Confguration

This section contains the basic configuration for Org mode. I'm leaving a lot out for now, including the configuration for Org agendas and capture templates. When you're ready, watch the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] and revisit.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (setq org-list-indent-offset 2)
    (setq evil-auto-indent nil))

  (use-package org
    :pin org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▸"
          org-hide-emphasis-markers t)
    (efs/org-font-setup))

#+end_src

** Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in Org-mode buffers with nicer-looking characters that you can customize.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))

#+end_src

** Block Templates

These let you type things like =<el= and then hit =Tab= to expand the template.
See [[https://orgmode.org/manual/Structure-Templates.html][Structure Templates]] in the Org Mode manual, and [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Babel Languages]] for supported languages and their identifiers.

#+begin_src emacs-lisp

  ;; Required as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))

#+end_src

* Development

** Languages

*** C/C++

/Maximum line length:  80/
/Indentation: 2 spaces/

[[https://www.gnu.org/software/emacs/manual/html_node/ccmode/index.html][CC Mode]] is a built-in Emacs mode for editing C, C++, Java, and several other languages.

#+begin_src emacs-lisp

  (defun tusk/c-mode-common-setup ()
    (setq c-default-style "java"
          c-basic-offset 2
          indent-tabs-mode nil)
    (setq display-fill-column-indicator-column 79)
    (display-fill-column-indicator-mode 1))

  (add-hook 'c-mode-common-hook 'tusk/c-mode-common-setup)

#+end_src

*** Markdown

You can toogle markup hiding with =C-c C-x C-m=.

#+begin_src emacs-lisp

  (defun efs/markdown-font-setup ()
    (variable-pitch-mode 1)
    (dolist (face '((markdown-header-face-1 . 2.0)
                    (markdown-header-face-2 . 1.7)
                    (markdown-header-face-3 . 1.4)
                    (markdown-header-face-4 . 1.1)
                    (markdown-header-face-5 . 1.0)
                    (markdown-header-face-6 . 1.0)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch appears that way
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'markdown-inline-code-face nil :inherit 'fixed-pitch))

  (use-package markdown-mode
    ;; :hook ((markdown-mode . variable-pitch-mode)
    ;;        (markdown-mode . efs/markdown-font-setup))
    :config
    ;; (setq-default markdown-header-scaling t)
    (setq-default markdown-list-indent-width 2
                  markdown-footnote-location 'immediately
                  markdown-hide-urls t
                  markdown-hide-markup nil))

#+end_src

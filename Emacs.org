#+TITLE: Emacs Configuration
#+AUTHOR: Dan Murphy
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :mkdirp yes

* Introduction

This Org Mode document generates the Emacs configuration file [[file:init.el][init.el]].

#+begin_src emacs-lisp

  ;; NOTE: Do not edit this file directly: init.el is generated from Emacs.org.
  ;; Edit that file in Emacs and init.el will be updated automatically.

#+end_src

* Package System Setup

Emacs has a built-in package manager, but [[https://github.com/jwiegley/use-package][use-package]] makes configuration and loading of packages much easier.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Keybindings

[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi layer for Emacs. It emulates the main features of Vim, turning Emacs into a modal editor. [[https://github.com/emacs-evil/evil-collection][Evil Collection]] provides additional bindings for the parts of Emacs that Evil does not cover.

[[https://github.com/noctuid/general.el][General]] provides a convenient method for adding keybindings; in particular, we can use General to return to normal state with 'jk'.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-evil-setup t)
    (general-imap "j"
      (general-key-dispatch 'self-insert-command
        :timeout 0.25
        "k" 'evil-normal-state)))

  (use-package evil
    :init
    (setq evil-want-integration t)  ; required by evil-collection
    (setq evil-want-keybinding nil) ; required by evil-collection
    (setq evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Appearance and Interface

** Basic Interface Settings

Unnecesary visual elements have been disabled, but the menu bar can be helpful while you're learning Emacs, so you may wish to leave it enabled.

#+begin_src emacs-lisp

  ;; Set default dimensions for new frames
  (add-to-list 'default-frame-alist '(width . 101))
  (add-to-list 'default-frame-alist '(height . 51))

  ;; Disable startup screen
  (setq inhibit-startup-message t) 

  ;; Disable the menu bar, scroll bar, tool bar and tooltips
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)

  (set-fringe-mode 10)  ; Set left and right margins

  (global-visual-line-mode 1)  ; Visually wrap long lines

  (blink-cursor-mode 0)  ; Disable blinking cursor

  ;; Enable line numbers globally, then disable them for specific modes
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; You might also try something like this:
  ;; (add-hook 'prog-mode-hook 'display-line-numbers relative)

#+end_src

** Fonts

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Iosevka" :height 160)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 160)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 160 :weight 'regular)

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is an excellent collection of high-quality themes with support for many different Emacs modes. Take a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] to find one you like. You can switch between themes easily with =M-x counsel-load-theme=.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-one t))

#+end_src

** Parenthesis Matching
   
Show Paren mode highlights matching delimiters. [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] makes it easier to visually match brackets and parentheses in code buffers.

#+begin_src emacs-lisp

  (show-paren-mode 1)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Mode Line

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive mode-line configuration. The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode-line icons display correctly.

#+begin_src emacs-lisp

  (column-number-mode)  ; Display column number in mode line

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 35)))

#+end_src

** Completion System

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

#+end_src

** Help System

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))

#+end_src

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Basic Editing Settings

Indentation and Tabs
Default to an indentation of 2 spaces, and use spaces instead of tabs (a.k.a. 'soft' tabs).

#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
  (setq-default indent-tabs-mode nil)

#+end_src

Electric Pair mode is analagous to the Autopair package for Vim.

#+begin_src emacs-lisp

  (electric-pair-mode 1)

#+end_src

* Org Mode

** Font Settings

The =efs/org-font-setup= function adjusts the sizes of headings and uses variable-width fonts in most cases so that it looks more like we're editing a document. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
   
** Basic Confguration

This section contains the basic configuration for Org mode. I'm leaving a lot out for now, including the configuration for Org agendas and capture templates. When you're ready, watch the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] and revisit.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " â–¸")
    (efs/org-font-setup))

#+end_src

** Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in Org-mode buffers with nicer-looking characters that you can customize.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp

  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Block Templates

These let you type things like =<el= and then hit =Tab= to expand the template.
See [[https://orgmode.org/manual/Structure-Templates.html][Structure Templates]] in the Org Mode manual, and [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Babel Languages]] for supported languages and their identifiers.

#+begin_src emacs-lisp

  ;; Required as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))

#+end_src

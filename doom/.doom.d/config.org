#+TITLE: Doom Emacs Configuration
#+AUTHOR: Dan Murphy

* Description

This file is a literate configuration for Doom Emacs. It is intended to be used with Doom's =config/literate= module, which must be enabled in =DOOMDIR/init.el=.

Source blocks will tangle to =DOOMDIR/config.el= unless otherwise specified; I've written this file to generate both =DOOMDIR/config.el= and =DOOMDIR/packages.el=.

The =config/literate= module cannot be used to tangle =init.el=, but that file is naturally well organized and thoroughly documented, and wouldn't especially benefit from literate configuration.

I'm not convinced the =config/literate= module adds anything useful: it would seem to be just as convenient to disable it and tangle the config files in the usual way (particularly if you use the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package). See zzamboni's [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][excellent example]] of a literate config for Doom that does not use the =literate= module.

* File Headers

We start with the headers for =config.el= and =package.el=, taken largely unchanged from the initial files generated by =doom install=. The headers enable [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#use-lexical-binding-everywhere][lexical binding]] and offer useful instructions on the use of these files.

#+begin_src elisp
  ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

  ;; Place your private configuration here! Remember, you do not need to run 'doom
  ;; sync' after modifying this file!

  ;; Here are some additional functions/macros that could help you configure Doom:
  ;;
  ;; - `load!' for loading external *.el files relative to this one
  ;; - `use-package!' for configuring packages
  ;; - `after!' for running code after a package has loaded
  ;; - `add-load-path!' for adding directories to the `load-path', relative to
  ;;   this file. Emacs searches the `load-path' when you load packages with
  ;;   `require' or `use-package'.
  ;; - `map!' for binding new keys
  ;;
  ;; To get information about any of these functions/macros, move the cursor over
  ;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
  ;; This will open documentation for it, including demos of how they are used.
  ;;
  ;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
  ;; they are implemented.
#+end_src

* User Information

#+begin_src elisp
  ;; Some functionality uses this to identify you, e.g. GPG configuration, email
  ;; clients, file templates and snippets.
  (setq user-full-name "Dan Murphy"
        user-mail-address "dan.murphy@alumni.utoronto.ca")
#+end_src

* General Settings

Set reasonable default settings for indentation: indent by 2 spaces, and use spaces instead of tabs.

#+begin_src elisp
  (setq-default tab-width 2
                indent-tabs-mode nil
                evil-shift-width tab-width)
#+end_src

* Appearance and UI

** Basic Interface Settings

#+begin_src elisp
  ;; Set default dimensions for new frames
  (add-to-list 'default-frame-alist '(width . 120))
  (add-to-list 'default-frame-alist '(height . 55))

  ;; Don't highlight current line
  (global-hl-line-mode 0)
#+end_src

** Fonts

#+begin_src elisp
  ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
  ;; are the three important ones:
  ;;
  ;; + `doom-font'
  ;; + `doom-variable-pitch-font'
  ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
  ;;   presentations or streaming.
  ;;
  ;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
  ;; font string. You generally only need these two:
  ;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
  ;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

  (setq doom-font (font-spec :family "Iosevka" :size 20)
        doom-variable-pitch-font (font-spec :family "Source Sans Pro" :size 20))
#+end_src

** Color Theme

#+begin_src elisp
  ;; There are two ways to load a theme. Both assume the theme is installed and
  ;; available. You can either set `doom-theme' or manually load a theme with the
  ;; `load-theme' function. This is the default:
  (setq doom-theme 'doom-one)
#+end_src

** Mode Line

#+begin_src elisp
  ;; Show indentation info in modeline
  (setq doom-modeline-indent-info t)
#+end_src

** Line Numbers

#+begin_src elisp
  ;; This determines the style of line numbers in effect. If set to `nil', line
  ;; numbers are disabled. For relative line numbers, set this to `relative'.
  (setq display-line-numbers-type t)
#+end_src

** Which-Key

#+begin_src elisp
  ;; Max height of which-key window, relative to frame's height.
  ;; Default value is 0.25; increase to minimize need for paging.
  (setq which-key-side-window-max-height 0.5)
#+end_src

* Keybindings

#+begin_src elisp
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
#+end_src

* Org

#+begin_src elisp
  ;; If you use `org' and don't want your org files in the default location below,
  ;; change `org-directory'. It must be set before org loads!
  ;;(setq org-directory "~/org/")
  (setq org-directory "~/Org/")
#+end_src

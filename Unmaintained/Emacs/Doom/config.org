#+TITLE: Doom Emacs Configuration
#+AUTHOR: Dan Murphy

* Description

This file is a literate configuration for Doom Emacs. It is intended to be used with Doom's =config/literate= module, which must be enabled in =DOOMDIR/init.el=.

Source blocks will tangle to =DOOMDIR/config.el= unless otherwise specified; I've written this file to generate both =DOOMDIR/config.el= and =DOOMDIR/packages.el=.

The =config/literate= module cannot be used to tangle =init.el=, but that file is naturally well organized and thoroughly documented, and wouldn't especially benefit from literate configuration.

I'm not convinced the =config/literate= module adds anything useful: it would seem to be just as convenient to disable it and tangle the config files in the usual way (particularly if you use the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package). See zzamboni's [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][excellent example]] of a literate config for Doom that does not use the =literate= module.

Some points to keep in mind while configuring Doom:
- Before installing a package (in =packages.el=), you may want to look in =~/.emacs.doom/.local/straight/repos/= and verify that it hasn't already been added by Doom.
- If anything goes wrong, you can always find the example versions of [[https://github.com/hlissner/doom-emacs/blob/develop/core/templates/config.example.el][config.el]], [[https://github.com/hlissner/doom-emacs/blob/develop/init.example.el][init.el]], [[https://github.com/hlissner/doom-emacs/blob/develop/core/templates/packages.example.el][packages.el]] on the Doom GitHub repo.

** TODO Complete Setup

- Submit an issue regarding folding in markdown.
- Try the =completion/company= module with the =+childframe= flag.
- Try dired-rangeer (dired with the =+ranger= flag).
- Consider adding the =super-save= package.
- If you decide you like EasyMark, consider binding its prefix to =SPC SPC= (the default in Vim) and binding =M-x= to =SPC-x=.
- Go through DT's, David Wilson's, and your own EFS config, and see if there's anything else you want to add.

* File Headers

We start with the headers for =config.el= and =packages.el=, taken largely unchanged from the example files generated by =doom install=. The headers enable [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#use-lexical-binding-everywhere][lexical binding]] and offer useful instructions on the use of these files.

** config.el

#+begin_src elisp
  ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

  ;; Place your private configuration here! Remember, you do not need to run 'doom
  ;; sync' after modifying this file!

  ;; Here are some additional functions/macros that could help you configure Doom:
  ;;
  ;; - `load!' for loading external *.el files relative to this one
  ;; - `use-package!' for configuring packages
  ;; - `after!' for running code after a package has loaded
  ;; - `add-load-path!' for adding directories to the `load-path', relative to
  ;;   this file. Emacs searches the `load-path' when you load packages with
  ;;   `require' or `use-package'.
  ;; - `map!' for binding new keys
  ;;
  ;; To get information about any of these functions/macros, move the cursor over
  ;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
  ;; This will open documentation for it, including demos of how they are used.
  ;;
  ;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
  ;; they are implemented.
#+end_src

** packages.el

#+begin_src elisp :tangle packages.el
  ;; -*- no-byte-compile: t; -*-
  ;;; $DOOMDIR/packages.el

  ;; To install a package with Doom you must declare them here and run 'doom sync'
  ;; on the command line, then restart Emacs for the changes to take effect -- or
  ;; use 'M-x doom/reload'.


  ;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
  ;(package! some-package)

  ;; To install a package directly from a remote git repo, you must specify a
  ;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
  ;; https://github.com/raxod502/straight.el#the-recipe-format
  ;(package! another-package
  ;  :recipe (:host github :repo "username/repo"))

  ;; If the package you are trying to install does not contain a PACKAGENAME.el
  ;; file, or is located in a subdirectory of the repo, you'll need to specify
  ;; `:files' in the `:recipe':
  ;(package! this-package
  ;  :recipe (:host github :repo "username/repo"
  ;           :files ("some-file.el" "src/lisp/*.el")))

  ;; If you'd like to disable a package included with Doom, you can do so here
  ;; with the `:disable' property:
  ;(package! builtin-package :disable t)

  ;; You can override the recipe of a built in package without having to specify
  ;; all the properties for `:recipe'. These will inherit the rest of its recipe
  ;; from Doom or MELPA/ELPA/Emacsmirror:
  ;(package! builtin-package :recipe (:nonrecursive t))
  ;(package! builtin-package-2 :recipe (:repo "myfork/package"))

  ;; Specify a `:branch' to install a package from a particular branch or tag.
  ;; This is required for some packages whose default branch isn't 'master' (which
  ;; our package manager can't deal with; see raxod502/straight.el#279)
  ;(package! builtin-package :recipe (:branch "develop"))

  ;; Use `:pin' to specify a particular commit to install.
  ;(package! builtin-package :pin "1a2b3c4d5e")


  ;; Doom's packages are pinned to a specific commit and updated from release to
  ;; release. The `unpin!' macro allows you to unpin single packages...
  ;(unpin! pinned-package)
  ;; ...or multiple packages
  ;(unpin! pinned-package another-pinned-package)
  ;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
  ;(unpin! t)
#+end_src

* User Information

#+begin_src elisp
  ;; Some functionality uses this to identify you, e.g. GPG configuration, email
  ;; clients, file templates and snippets.
  (setq user-full-name "Dan Murphy"
        user-mail-address "dan.murphy@alumni.utoronto.ca")
#+end_src

* General Settings

Set reasonable default settings for indentation: indent by 2 spaces, and use spaces instead of tabs.

#+begin_src elisp
  (setq-default tab-width 2
                indent-tabs-mode nil
                evil-shift-width tab-width)
#+end_src

* Appearance and UI

** Basic Interface Settings

Default dimensions for new frames.

#+begin_src elisp
  (add-to-list 'default-frame-alist '(width . 120))
  (add-to-list 'default-frame-alist '(height . 55))
#+end_src

Doom highlights the current line by default, but I find this distracting. Adding =(global-hl-line-mode 0)= to your config won't work; see [[https://github.com/hlissner/doom-emacs/issues/4206#issuecomment-734414502][this comment]] instead.

#+begin_src elisp
  (remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)
#+end_src

** Fonts

#+begin_src elisp
  ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
  ;; are the three important ones:
  ;;
  ;; + `doom-font'
  ;; + `doom-variable-pitch-font'
  ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
  ;;   presentations or streaming.
  ;;
  ;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
  ;; font string. You generally only need these two:
  ;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
  ;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

  (setq doom-font (font-spec :family "Iosevka" :size 16)
        doom-variable-pitch-font (font-spec :family "Source Sans Pro" :size 18))
#+end_src

*** Variable-pitch fonts in text buffers

[[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] lets you mix fixed- and variable-pitch fonts, which really improves the look of text-based modes like Org and Markdown.

#+begin_src elisp :tangle packages.el
(package! mixed-pitch)
#+end_src

Set =mixed-pitch-set-height= to =t= if you want to be able to set the sizes of your fixed- and variable-pitch fonts independently; if =nil=, =doom-variable-pitch-font= inherits its size from =doom-font=.

#+begin_src elisp
(use-package! mixed-pitch
  :hook ((gfm-mode markdown-mode org-mode) . mixed-pitch-mode)
  :config
  (setq mixed-pitch-set-height t))
#+end_src

/Note:/ The Company completion popup won't appear correctly in mixed-pitch buffers. One solution is to use [[https://github.com/sebastiencs/company-box][company-box]] to display completion popups in a child frame. In Doom, you can add company-box by enabling the  =completion/(company +childframe)= flag. Alternatively, if you find completion distracting in text buffers, just disable Company for such buffers.

*** Disable completion in text buffers

Completion is great in code buffers, but I find it distracting when writing text.

#+begin_src elisp
;; In Doom, the `company-global-modes' variable has already
;; been customized and begins with `not'.
(after! company
  (setq company-global-modes
        (append company-global-modes '(markdown-mode org-mode text-mode))))
#+end_src

** Color Theme

#+begin_src elisp
  ;; There are two ways to load a theme. Both assume the theme is installed and
  ;; available. You can either set `doom-theme' or manually load a theme with the
  ;; `load-theme' function. This is the default:
  (setq doom-theme 'doom-one)
#+end_src

** Mode Line

#+begin_src elisp
  ;; Show indentation info in modeline
  (setq doom-modeline-indent-info t)
#+end_src

** Line Numbers

#+begin_src elisp
  ;; This determines the style of line numbers in effect. If set to `nil', line
  ;; numbers are disabled. For relative line numbers, set this to `relative'.
  (setq display-line-numbers-type 'relative)
#+end_src

** Which-Key

Paging in =which-key= popups does not work with the =completion/vertico= module, because which-key's paging prefix, =C-h=, is shadowed by =embark-prefix-help-command=. This isn't technically a problem, because the Embark command provides the same functionality. This issue is described [[https://github.com/hlissner/doom-emacs/issues/5564][here]], along with a very nice [[https://github.com/hlissner/doom-emacs/issues/5564#issuecomment-975124022][solution]], the result of which is that
- when no which-key popup is active, =C-h= invokes =prefix-help-command=;
- when a which-key popup is visible, =C-h= invokes which-key paging and =C-h h= invokes =prefix-help-command=.

#+begin_src elisp
  (setq which-key-use-C-h-commands t
        prefix-help-command #'which-key-C-h-dispatch)

  ;; A hook is needed because which-key-mode sets
  ;; `which-key--prefix-help-cmd-backup' when `which-key-mode' is enabled.
  (add-hook 'which-key-mode-hook 'set-which-key--prefix-help-cmd-backup)

  (defun set-which-key--prefix-help-cmd-backup ()
    (setq which-key--prefix-help-cmd-backup 'my/embark-prefix-help-command))

  (defun my/embark-prefix-help-command (popup-showing)
    "Prompt for and run a command bound in the prefix used to reach this command.
  This command is intended to be used as the value of
  `which-key--prefix-help-cmd-backup' when `prefix-help-command' is set to
  `which-key-C-h-dispatch' and `which-key-use-C-h-commands' is set to `t'. When
  the which-key-popup is not visible, `which-key-C-h-dispatch' calls
  `which-key-show-standard-help', which calls `which-key--prefix-help-cmd-backup',
  which by default is set to the original value of `prefix-help-command' when
  `which-key-mode' is first enabled. In Doom Emacs with `vertico',
  `prefix-help-command' is typically the original `embark-prefix-help-command'
  that this function replaces. Note that this function must be called from a
  modified version of `which-key-show-standard-help' that passes `popup-showing'.

  In addition to using completion to select a command, you can also type @ and the
  key binding (without the prefix)."
    (interactive)
    (let (keys)
      (if popup-showing
          (setq keys (which-key--current-prefix))
        (setq keys (this-command-keys-vector))
        (setq keys (seq-take keys (1- (length keys)))))
      (embark-bindings keys)))

  (advice-add 'which-key-show-standard-help
              :override 'my/which-key-show-standard-help)

  (defun my/which-key-show-standard-help (&optional _)
    "Call the command in `which-key--prefix-help-cmd-backup'.
  Usually this is `describe-prefix-bindings'.

  Unlike the original function, `popup-showing' is passed to
  `which-key--prefix-help-cmd-backup'."
    (interactive)
    (let ((which-key-inhibit t)
          (popup-showing (which-key--popup-showing-p)))
      (which-key--hide-popup-ignore-command)
      (cond ((and (eq which-key--prefix-help-cmd-backup
                      'describe-prefix-bindings)
                  ;; If the popup is not showing, we call
                  ;; `describe-prefix-bindings' directly.
                  popup-showing)
            ;; This is essentially what `describe-prefix-bindings' does. We can't
            ;; use this function directly, because the prefix will not be correct
            ;; when we enter using `which-key-C-h-dispatch'.
            (describe-bindings (kbd (which-key--current-key-string))))
            ((functionp which-key--prefix-help-cmd-backup)
            (funcall which-key--prefix-help-cmd-backup popup-showing)))))
#+end_src

I quite like the solution above, but I'll also reduce the need for paging by increasing the maximum size of the which-key popup. I find paging in which-key annoying, and I don't particularly need to see the contents of the current buffer while searching for a command.

#+begin_src elisp
  ;; Max height of which-key window, relative to frame's height.
  ;; Default value is 0.25; increase to minimize need for paging.
  (setq which-key-side-window-max-height 0.5)
#+end_src

/Note:/ A related issue is that neither which-key paging nor Embark help will be available if =C-h= is bound to another command under the current prefix, which is the case for =SPC w= and =C-w=. You might consider removing these bindings, as neither is particularly useful.

** Evil Search Highlighting

In Doom, =evil-ex= search results (from =/= and =?= searches) remain highlighted. If you prefer the default Emacs behaviour, in which highlighting turns off after a short delay, change the value of =evil-search-module= from =evil-search= to =isearch=.

If you decide to stick with =evil-search=, recall that =:noh= will turn the current highlighting off, and you may also want to follow Spacemacs and add the binding =SPC s c= (bound to =evil-ex-nohighlight=).

#+begin_src elisp
  ;;(evil-select-search-module 'evil-search-module 'evil-search)
  (evil-select-search-module 'evil-search-module 'isearch)
#+end_src

** Parenthesis Matching

Doom provides the [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] package out of the box, and enables =show-paren-mode= globally but [[https://github.com/hlissner/doom-emacs/pull/61][disables it]] in Org buffers, since it causes problems for =org-indent-mode=.

Doom also provides the [[https://github.com/Fuco1/smartparens][Smartparens]] package out of the box, so you might consider =show-smartparens-mode= as an alternative to =show-paren-mode=. The former works for all user-defined pairs and has a customizable delay; see the Smartparens [[https://github.com/Fuco1/smartparens/wiki/Show-smartparens-mode][wiki]] for  details.

#+begin_src elisp
;; Highlight matching paren with a ligher grey background,
;; instead of a darker one
(custom-set-faces! '(show-paren-match :background "#363e4a"))
#+end_src

** Indentation Guides

[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] adds visual guides for indentation levels. Doom provides this package as the [[https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/indent-guides/config.el][ui/indent-guides]] module, and enables it in most major modes; however, I only want indentation guides for curly-brace languages.

#+begin_src elisp
(remove-hook! (conf-mode prog-mode text-mode) #'highlight-indent-guides-mode)
(add-hook! 'c-mode-common-hook 'highlight-indent-guides-mode)
#+end_src

* Keybindings

Set 'j' and 'k' to move by visual lines.

#+begin_src elisp
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
#+end_src

Doom has =execute-extended-command= bound to =SPC :=, which isn't any easier to hit than =M-x=. I'll rebind it to =SPC SPC= (which, in turn, is bound to =projectile-find-file=, but this command is also bound to the easy-to-hit =SPC p f=).

#+begin_src elisp
(map! :leader ":" nil)
(map! :leader :desc "M-x" "SPC" #'execute-extended-command)
#+end_src

Doom binds =SPC w C-h= to =evil-window-left= which makes which-key paging and Embark help unavailable for the =SPC w= prefix. I'd never use any of the =SPC w C-[hjkl]= bindings (just hit =SPC w [hjkl]= instead), so remove them. For that matter, there are a number of these redundant =SPC w C-= bindings that can be removed.

Doom also binds =C-w C-h=, etc., but these are more useful and consistent with Vim, so I'll leave them.

#+begin_src elisp
(map! :leader
      "w C-_" nil
      "w C-b" nil
      "w C-h" nil
      "w C-j" nil
      "w C-k" nil
      "w C-l" nil
      "w C-n" nil
      "w C-o" nil
      "w C-p" nil
      "w C-s" nil
      "w C-t" nil
      "w C-u" nil
      "w C-v" nil
      "w C-S-s" nil)
#+end_src

Doom binds =SPC w o= and =C-w o= to =doom/window-enlargen=, but I prefer the usual =delete-other-windows=.

#+begin_src elisp
(map! :leader "w o" #'delete-other-windows)
(map! :n "C-w o" #'delete-other-windows)
#+end_src

The Doom module =ui/(window-select +numbers)= provides the [[https://github.com/deb0ch/emacs-winum][winum]] package, and binds the =winum-select-window= commands under the =SPC w= and =C-w= prefixes. I also want these commands available directly under the =SPC= prefix and, for all three prefixes, I don't want these commands cluttering up the which-key popup.

#+begin_src elisp
;; Add bindings under "SPC" prefix
(map! :leader
      "0" #'winum-select-window-0
      "1" #'winum-select-window-1
      "2" #'winum-select-window-2
      "3" #'winum-select-window-3
      "4" #'winum-select-window-4
      "5" #'winum-select-window-5
      "6" #'winum-select-window-6
      "7" #'winum-select-window-7
      "8" #'winum-select-window-8
      "9" #'winum-select-window-9)

;; Don't display winum-select-window bindings in which-key popups
(after! which-key
  (push '((nil . "winum-select-window-[0-9]") . t) which-key-replacement-alist))
#+end_src

=consult-outline= is a useful function that deserves a binding. =SPC s o= make sense to me, but Doom binds =SPC s o/O= to online lookup functions; I'll move them to =SPC w/W=.

#+begin_src elisp
(map! :leader
      :desc "Outline" "s o" #'consult-outline
      "s O" nil
      :desc "Look up online" "s w" #'+lookup/online
      :desc "Look up online (w/ prompt)" "s W" #'+lookup/online-select)
#+end_src

* Dired

The [[https://github.com/mattiasb/dired-hide-dotfiles][dired-hide-dotfiles]] package lets you toggle whether dotfiles are shown in Dired buffers (and can optionally display how may dotfiles were hidden).

#+begin_src elisp :tangle packages.el
(package! dired-hide-dotfiles)
#+end_src

#+begin_src elisp
(setq delete-by-moving-to-trash t)

;; Navigate the directory structure with "h" and "l"
(map! :map dired-mode-map
  :n "h" 'dired-up-directory
  :n "l" 'dired-find-file)

(use-package! dired-hide-dotfiles
  ;; :defer t
  :hook (dired-mode . dired-hide-dotfiles-mode)  ;; Hide dotfiles by default
  :config
  (map! :map 'dired-mode-map
        :n "H" 'dired-hide-dotfiles-mode))
#+end_src

* Org

#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;;(setq org-directory "~/org/")
(setq org-directory "~/Org/")

(after! org
  (setq ;org-ellipsis " ▸"
        org-hide-emphasis-markers t))
#+end_src

Set larger font sizes for headings.

#+begin_src elisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
  '(org-level-6 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Toggle markup visibility with org-appear

[[https://github.com/awth13/org-appear][org-appear]] is an invaluable package that makes it much easier to edit Org documents when =org-hide-emphasis-markers= is active. It temporarily makes concealed markup elements appear when the cursor enters an element. By default, toggling is instaneous and applies only to emphasis markers, but additional functionality can be enabled via custom variables.

=org-appear= is installed as part of Doom's =lang/org= module when the =+pretty= flag is enabled, but isn't active by default.

#+begin_src elisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  ;;:custom
  ;;(org-appear-autolinks t)  ;; toggle links
  ;;(org-appear-delay 0.5)    ;; delay before toggling
  )
#+end_src

* Languages

Be sure to enable the =tools/lookup= and =tools/(lsp +peek)= modules in =init.el=.

** C/C++

/Maximum line length:  80/
/Indentation: 2 spaces/
/Doom module:/ =lang/(cc +lsp)=

[[https://www.gnu.org/software/emacs/manual/html_node/ccmode/index.html][CC Mode]] is a built-in Emacs mode for editing C, C++, Java, and several other languages.

[[https://github.com/MaskRay/ccls][ccls]] is a language server for C/C++/Objective-C, and is available on Arch-based systems as =ccls=. An alternative server is [[https://clangd.llvm.org/][clangd]], but it only covers C++. Doom uses =ccls= by default.

#+begin_src emacs-lisp
(add-hook! (c-mode c++-mode)
  (setq c-default-style "java"
        c-basic-offset 2
        indent-tabs-mode nil
        display-fill-column-indicator-column 79)
  (display-fill-column-indicator-mode 1))
#+end_src

** Java

/Maximum line length:  100/
/Indentation: 4 spaces/
/Doom module:/ =lang/(java +lsp)=

The =+lsp= flag adds [[https://github.com/emacs-lsp/lsp-java/][lsp-java]], an Emacs Java IDE using the [[https://projects.eclipse.org/projects/eclipse.jdt.ls][Eclipse JDT Language Server]].

#+begin_src emacs-lisp
(add-hook! java-mode
  (setq c-default-style "java"
        c-basic-offset 4
        indent-tabs-mode nil
        display-fill-column-indicator-column 99)
  (display-fill-column-indicator-mode 1))
#+end_src

** Markdown

#+begin_src elisp
(custom-set-faces
  '(markdown-header-face-1 ((t (:inherit outline-1 :height 1.4))))
  '(markdown-header-face-2 ((t (:inherit outline-2 :height 1.3))))
  '(markdown-header-face-3 ((t (:inherit outline-3 :height 1.2))))
  '(markdown-header-face-4 ((t (:inherit outline-4 :height 1.2))))
  '(markdown-header-face-5 ((t (:inherit outline-5 :height 1.1))))
  '(markdown-header-face-6 ((t (:inherit outline-5 :height 1.1))))
  '(markdown-header-delimiter-face ((t (:inherit markdown-markup-face)))))

(use-package! markdown-mode
  :config
  (setq-default markdown-list-indent-width 2
                markdown-footnote-location 'end
                markdown-hide-urls t
                markdown-hide-markup nil))
#+end_src

" Filepath: ~/.vim/vimrc
" Author: Dan Murphy


" Basic Settings ························································ {{{1

" Turn off Vi compatibility
" This should be at the top of your vimrc
" To avoid unintended side effects, `nocompatible` should not be set twice
if &compatible
    set nocompatible
endif

" Disable modelines as a security precaution
" set modelines=0
" set nomodeline

" Use the space key as your leader key
" Put this near the top of your vimrc
let mapleader = "\<Space>"

" Allow hidden buffers with unsaved changes
set hidden

" Attempt to determine the type of a file based on its name and 
" possibly its contents. Use this to allow intelligent auto-indenting
" for each filetype, and for plugins that are filetype specific.
filetype indent plugin on

" Tab autocomplete in command mode
set wildmenu

" Use case-insensitive search, except when using capital letters
set ignorecase smartcase

" Show search results as you type
set incsearch

" Highlight search matches only while searching
augroup vimrc-incsearch-highlight
    autocmd!
    autocmd CmdlineEnter /,\? :set hlsearch
    autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Preview the effects of substitution commands as you type
set inccommand=nosplit

" Backspace deletes like most programs in Insert mode
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled,
" keep the same indent as the line you're currently on.
" Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Insert only one space after a '.', '?' or '!' when joining lines
set nojoinspaces

" Remove comment leader when joining commented lines
set formatoptions+=j

" Use Canadian and US English spellings
setlocal spelllang=en_ca,en_us

" Use soft tabs (insert spaces instead of tab characters)
set expandtab smarttab

" Set tab stops and indentation at 4 spaces
set shiftwidth=4 tabstop=4 softtabstop=4

" Enable mouse support in all modes
set mouse=a

" Use option (alt) as meta key in MacVim
if has('gui_macvim')
    set macmeta
endif


" Appearance and Interface Options ······································ {{{1

" Use visual (instead of audible) bell
set visualbell

" Instead of failing a command (:q, :w, etc.) because of unsaved changes,
" use a dialogue when an operation has to be confirmed
set confirm

" Open files unfolded
set nofoldenable

" Enable folding for Markdown documents
let g:markdown_folding = 1

" Keep some lines and columns visible around the cursor
set scrolloff=4
set sidescrolloff=5

" (Visually) wrap long lines, breaking at word boundaries
" Use `breakat` to specify the characters that can cause a line break
set wrap linebreak

" When the `wrap` option is off, show arrows if line continues
" leftwards/rightwards
set listchars+=precedes:←,extends:→               

" Display (absolute or relative) line numbers
" set number
set number relativenumber

" Switch to absolute line numbers in Insert mode, and when a buffer loses
" focus
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Show matching braces, brackets and parentheses
set showmatch

" Set the command window height to 2 lines, to avoid many cases of
" having to "press <Enter> to continue"
set cmdheight=2

" Show partial commands in the last line of the screen
set showcmd

" Open new windows below/to the right of the current window
set splitbelow splitright

" GUI Vim Settings
"   Most GUI Vim implementations probably lack fine adjustment of glyph
"   spacing/offset, so avoid Powerline/NERD fonts
if has('gui_running')
    set guicursor+=a:blinkon0   " Disable cursor blinking
    set guifont=JetBrains\ Mono:h14
    set linespace=6
endif


" Package Management (minpac) ··········································· {{{1

function! PackInit() abort
    packadd minpac
    call minpac#init()
    call minpac#add('k-takata/minpac', {'type': 'opt'})

    " Plugins
    call minpac#add('jiangmiao/auto-pairs')
    " call minpac#add('itchyny/vim-gitbranch')
    " call minpac#add('rrethy/vim-hexokinase', {'do': 'make hexokinase'})
    call minpac#add('machakann/vim-highlightedyank')
    call minpac#add('preservim/vim-markdown')
    call minpac#add('itspriddle/vim-marked')
    " call minpac#add('masukomi/vim-markdown-folding')
    call minpac#add('tpope/vim-repeat')
    call minpac#add('cespare/vim-toml')
    call minpac#add('tpope/vim-surround')

    call minpac#add('Yggdroot/indentLine', {'type': 'opt'})
    call minpac#add('lukas-reineke/indent-blankline.nvim', {'type': 'opt'})

    " Colorschemes
    " call minpac#add('dracula/vim', {'type': 'opt', 'name': 'dracula'})
    " call minpac#add('sainnhe/edge', {'type': 'opt'})
    " call minpac#add('tomasr/molokai', {'type': 'opt'})
    call minpac#add('arzg/vim-substrata', {'type': 'opt'})
    call minpac#add('arcticicestudio/nord-vim', {'type': 'opt'})
    call minpac#add('joshdick/onedark.vim', {'type': 'opt'})
    " call minpac#add('lifepillar/vim-solarized8', {'type': 'opt'})
    " call minpac#add('sainnhe/sonokai', {'type': 'opt'})
endfunction

" Commands for updating/cleaning packages
command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()


" Auto Pairs settings
" Enable Fly Mode
"let g:AutoPairsFlyMode = 1

" Hexokinase settings
" let g:Hexokinase_highlighters = ['sign_column']
" Don't match colour_names
" let g:Hexokinase_optInPatterns = 'full_hex,rgb,rgba,hsl,hsla'

" indentLine and indent-blankline settings
" indent-blankline requires Neovim 0.4.0 or higher, and indentLine looks odd
" without it
if has('nvim')
    packadd! indentLine
    packadd! indent-blankline.nvim
    " Hightlight group to use for default colors
    let g:indentLine_defaultGroup = 'SpecialKey'
    " Show first indentation level
    let g:indentLine_showFirstIndentLevel = 0
    " Character(s) to use for indent line, e.g. "│" or "┊"
    let g:indentLine_first_char = "│"
    let g:indentLine_char = "│"
    " Start with both plugins disabled, except for specific file types
    let g:indentLine_fileType = ['c']
    " A shorter command to toggle both plugins on or off
    command! IGT IndentBlanklineToggleAll
endif


" Color and Syntax Highlighting ········································· {{{1

" Basic Color Settings ·················································· {{{2

" Enable true-color (24-bit) option when the terminal and Vim support it
if (has("termguicolors"))
  set termguicolors
endif

" Enable syntax highlighting (colors)
syntax on


" Color Schemes ························································· {{{2

let g:color_scheme_list = {}

let g:color_scheme_list['Dracula'] = [
    \ 'packadd! dracula',
    \ 'let g:dracula_colorterm = 1',
    \ 'colorscheme dracula'
    \]

let g:color_scheme_list['Edge'] = [
    \ 'packadd! edge',
    \ 'set background=dark',
    \ "let g:edge_style = 'default'",
    \ 'let g:edge_enable_italic = 1',
    \ 'let g:edge_disable_italic_comment = 1',
    \ 'colorscheme edge'
    \ ]

let g:color_scheme_list['Molokai'] = [
    \ 'let g:molokai_original = 0',
    \ 'colorscheme molokai'
    \]

let g:color_scheme_list['Nord'] = [
    \ 'let g:nord_italic = 1',
    \ 'let g:nord_italic_comments = 0',
    \ 'let g:nord_underline = 1',
    \ 'colorscheme nord'
    \ ]

let g:color_scheme_list['Onedark'] = [
    \ 'packadd! onedark.vim',
    \ 'let g:onedark_terminal_italics = 0',
    \ 'colorscheme onedark'
    \ ]

let g:color_scheme_list['Solarized8'] = [
    \ 'set background=light',
    \ 'let g:solarized_italics = 0',
    \ 'colorscheme solarized8'
    \ ]

let g:color_scheme_list['Sonokai'] = [
    \ 'packadd! sonokai',
    \ "let g:sonokai_style = 'default'",
    \ 'let g:sonokai_enable_italic = 1',
    \ 'let g:sonokai_disable_italic_comment = 1',
    \ 'colorscheme sonokai'
    \ ]

let g:color_scheme_list['Substrata'] = [
    \ 'colorscheme substrata'
    \]

function! SetColorScheme(name) abort
    for l:item in g:color_scheme_list[a:name]
        execute l:item
    endfor
endfunction

function! s:colo(a, l, p)
    return keys(g:color_scheme_list)
endfunction

command! -bar -nargs=? -complete=customlist,<sid>colo Colo call SetColorScheme(<f-args>)

" Set initial color scheme
call SetColorScheme('Onedark')

" Show comments in italics
" highlight Comment cterm=italic gui=italic


" Status-Line Settings ···················································· {{{2

" Always display the status line, even if only one window is displayed
set laststatus=2

" A non-empty `statusline` takes precedence over `ruler`
" set noruler 


" Mappings ······························································ {{{1

" Exit Insert mode by pressing 'jk'
inoremap jk <Esc>

" Move by screen lines, not file lines, unless a count is provided
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" Map Y to act like D and C, i.e. 'y$' rather than the default 'yy' 
noremap Y y$

" Reselect visual selection after indenting
vnoremap < <gv
vnoremap > >gv

" Allow gf to open non-existent files
map gf :edit <cfile><cr>

" Open the current file in the default program
" (use 'xdg-open' on Linux and 'open' on Mac)
nmap <leader>x :!open %<cr><cr>

" Paste-replace visual selection without copying it
vnoremap <leader>p "_dP

" Easier switching between buffers
" Often mapped to <leader>l
nnoremap gb :ls<CR>:b<Space>

" The following pair of commands is a subset of Tim Pope's Unimpaired 
" plugin <tpope/vim-unimpaired>
" Insert a newline before or after the cursor with `[<Space>` and
" `[<Space>`, respectively
nnoremap <silent> [<space>  :<c-u>put!=repeat([''],v:count)<bar>']+1<cr>
nnoremap <silent> ]<space>  :<c-u>put =repeat([''],v:count)<bar>'[-1<cr>

" Easier window navigation
noremap <leader>wh <C-w>h
noremap <leader>wj <C-w>j
noremap <leader>wk <C-w>k
noremap <leader>wl <C-w>l
noremap <leader>ww <C-w>w
tnoremap <leader>wh <C-\><C-n><C-w>h
tnoremap <leader>wj <C-\><C-n><C-w>j
tnoremap <leader>wk <C-\><C-n><C-w>k
tnoremap <leader>wl <C-\><C-n><C-w>l
tnoremap <leader>ww <C-\><C-n><C-w>w

" Edit Vim configuration
nmap <leader>ve :edit ~/.vim/vimrc<cr>
nmap <leader>vr :source ~/.vim/vimrc<cr>


" Scripts ······························································· {{{1

" The following script allows you to assign the same value to tabstop,
" softtabstop and shiftwidth simultaneously.
" To invoke the command, run " :Stab " in Normal mode.
" From http://vimcasts.org/episodes/tabs-and-spaces/

command! -nargs=* Stab call Stab()
function! Stab()
    let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
    if l:tabstop > 0
        let &l:sts = l:tabstop
        let &l:ts = l:tabstop
        let &l:sw = l:tabstop
    endif
    redraw
    call SummarizeTabs()
endfunction

function! SummarizeTabs()
    try
        echohl ModeMsg
        echon 'tabstop='.&l:ts
        echon ' shiftwidth='.&l:sw
        echon ' softtabstop='.&l:sts
        if &l:et
            echon ' expandtab'
        else
            echon ' noexpandtab'
        endif
    finally
        echohl None
    endtry
endfunction


" vim: sw=4 ts=4 sts=4 et fdm=marker

" File: ~/.vim/vimrc
" Author: Dan Murphy


" Basic Settings ·⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ {{{1

" Turn off Vi compatibility
" This should be at the top of your vimrc
" To avoid unintended side effects, `nocompatible` should not be set twice
if &compatible
    set nocompatible
endif

" Use the space key as your leader key
" Put this near the top of your vimrc
let mapleader = "\<Space>"

" Allow hidden buffers with unsaved changes
set hidden

" Attempt to determine the type of a file based on its name and 
" possibly its contents. Use this to allow intelligent auto-indenting
" for each filetype, and for plugins that are filetype specific.
filetype indent plugin on

" Tab autocomplete in command mode
set wildmenu

" Use case-insensitive search, except when using capital letters
set ignorecase smartcase

" Highlight searches; better still, highlight search matches only while
" searching (available in more recent versions of Vim)
if v:version >= 810 || has('nvim-0.3.0') 
    augroup vimrc-incsearch-highlight
        autocmd!
        autocmd CmdlineEnter /,\? :set hlsearch
        autocmd CmdlineLeave /,\? :set nohlsearch
    augroup END
else
    set hlsearch
endif

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Show search results as you type
set incsearch

" Backspace deletes like most programs in Insert mode
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled,
" keep the same indent as the line you're currently on.
" Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Remove comment leader when joining commented lines
set formatoptions+=j

" Use Canadian and US English spellings
setlocal spelllang=en_ca,en_us

" Use soft tabs (insert spaces instead of tab characters)
set expandtab smarttab

" Set tab stops and indentation at 4 spaces
set shiftwidth=4 tabstop=4 softtabstop=4


" Appearance and Interface Options ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅{{{1

" Use visual (instead of audible) bell
set visualbell

" Instead of failing a command (:q, :w, etc.) because of unsaved changes,
" use a dialogue when an operation has to be confirmed
set confirm

" Open files unfolded
set nofoldenable

" Enable folding for Markdown documents
let g:markdown_folding = 1

" Keep some lines and columns visible around the cursor
set scrolloff=4
set sidescrolloff=5

" (Visually) wrap long lines, breaking at word boundaries
" Use `breakat` to specify the characters that can cause a line break
set wrap linebreak

" When the `wrap` option is off, show arrows if line continues
" leftwards/rightwards
set listchars+=precedes:←,extends:→               

" Display (absolute or relative) line numbers
" set number
set number relativenumber

" Show matching braces, brackets and parentheses
set showmatch

" Always display the status line, even if only one window is displayed
set laststatus=2

" Set the command window height to 2 lines, to avoid many cases of
" having to "press <Enter> to continue"
set cmdheight=2

" Show partial commands in the last line of the screen
set showcmd

" Display the cursor position
set ruler 

" Enable syntax highlighting (colors)
syntax on

" Show comments in italics
" highlight Comment cterm=italic gui=italic


" Mappings ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ {{{1

" Exit Insert mode by pressing 'j' and 'k' together, or alternatively,
" by pressing 'j' twice
inoremap jk <Esc>
inoremap kj <Esc>
" inoremap jj <Esc>

" Set 'j' and 'k' to move by screen lines, not true lines
noremap j gj
noremap k gk

" Map Y to act like D and C, i.e. 'y$' rather than the default 'yy' 
map Y y$

" The following pair of commands is a subset of Tim Pope's Unimpaired 
" plugin <tpope/vim-unimpaired>
" Insert a newline before or after the cursor with `[<Space>` and
" `[<Space>`, respectively
nnoremap <silent> [<space>  :<c-u>put!=repeat([''],v:count)<bar>']+1<cr>
nnoremap <silent> ]<space>  :<c-u>put =repeat([''],v:count)<bar>'[-1<cr>


" Scripts ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ {{{1

" The following script allows you to assign the same value to tabstop,
" softtabstop and shiftwidth simultaneously.
" To invoke the command, run " :Stab " in Normal mode.
" From http://vimcasts.org/episodes/tabs-and-spaces/

command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction


" vim: sw=4 ts=4 sts=4 et fdm=marker

" File: ~/.vim/vimrc
" Author: Dan Murphy

"-----------------------------------------------------------------------------
" Essential features and options
"-----------------------------------------------------------------------------

" Turn off Vi compatibility
" This should be at the top of your vimrc
" To avoid unintended side effects, `nocompatible` should not be set twice
if &compatible
    set nocompatible
endif

" Disable modelines as a security precaution
set modelines=0
set nomodeline

" Use the space key as our leader
" Put this near the top of your vimrc
let mapleader = "\<Space>"

" Attempt to determine the type of a file based on its name and 
" possibly its contents. Use this to allow intelligent auto-indenting
" for each filetype, and for plugins that are filetype specific.
filetype indent plugin on

" Tab autocomplete in command mode
set wildmenu

" Use case-insensitive search, except when using capital letters
set ignorecase smartcase

" Highlight searches
" set hlsearch

" Highlight search matches only while searching
augroup vimrc-incsearch-highlight
    autocmd!
    autocmd CmdlineEnter /,\? :set hlsearch
    autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Show search results as you type
set incsearch

" Backspace deletes like most programs in insert mode
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled,
" keep the same indent as the line you're currently on.
" Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Remove comment leader when joining commented lines
set formatoptions+=j

" Use Canadian and US English spellings
setlocal spelllang=en_ca,en_us

" Use soft tabs (insert spaces instead of tab characters)
set expandtab smarttab

" Set tab stops and indentation at 4 spaces
set shiftwidth=4 tabstop=4 softtabstop=4


"-----------------------------------------------------------------------------
" Appearance and interface options
"-----------------------------------------------------------------------------

" (Visually) wrap long lines, breaking at word boundaries
" Use `breakat` to specify the characters that can cause a line break
set wrap linebreak

" When the `wrap` option is off, show arrows if line continues
" leftwards/rightwards
" set listchars+=precedes:←,extends:→               

" Display (absolute or relative) line numbers
" set number
set number relativenumber

" Display the cursor position
set ruler 

" Always display the status line, even if only one window is displayed
set laststatus=2

" Set the command window height to 2 lines, to avoid many cases of
" having to "press <Enter> to continue"
set cmdheight=2

" Keep some lines and columns visible around the cursor
set scrolloff=4
set sidescrolloff=5

" Use visual (instead of audible) bell
set visualbell

" Instead of failing a command because of unsaved changes, raise a
" dialogue asking if you wish to save changed files.
set confirm

" Show partial commands in the last line of the screen
set showcmd

" If using the Lightline plugin, you don't need Vim to display the mode
" on the last line
set noshowmode

" Show comments in italics
" highlight Comment cterm=italic gui=italic

" Open files unfolded
set nofoldenable


"-----------------------------------------------------------------------------
" Package management (minpac)
"-----------------------------------------------------------------------------

function! PackInit() abort
    packadd minpac
    call minpac#init()
    call minpac#add('k-takata/minpac', {'type': 'opt'})

    " Plugins
    call minpac#add('jiangmiao/auto-pairs')
    call minpac#add('itchyny/lightline.vim')
    call minpac#add('plasticboy/vim-markdown')
    call minpac#add('tpope/vim-surround')

    " Color themes
    call minpac#add('cocopon/iceberg.vim', {'type': 'opt'})
    call minpac#add('arcticicestudio/nord-vim', {'type': 'opt'})
    call minpac#add('rakr/vim-one', {'type': 'opt'})
    call minpac#add('joshdick/onedark.vim', {'type': 'opt'})
    call minpac#add('lifepillar/vim-solarized8', {'type': 'opt'})
endfunction

" Commands for updating/cleaning packages
command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()


" Auto Pairs <jiangmiao/auto-pairs>
let g:AutoPairsFlyMode = 1      " Enable Fly Mode


"-----------------------------------------------------------------------------
" Color and syntax highlighting
"-----------------------------------------------------------------------------

" Enable true-color (24-bit) option when the terminal and Vim support it
if (has("termguicolors"))
  set termguicolors
endif

" Enable syntax highlighting (colors)
syntax on


" Iceberg <cocopon/iceberg.vim>
" packadd! iceberg.vim
" set background=light
" colorscheme iceberg
" let g:lightline = { 'colorscheme': 'iceberg' }

" Nord <arcticicestudio/nord-vim>
colorscheme nord
let g:lightline = { 'colorscheme': 'nord' }

" Vim-One theme <rakr/vim-one>
" let g:one_allow_italics = 1
" set background=light
" colorscheme one
" let g:lightline = { 'colorscheme': 'one' }

" Onedark theme <joshdick/onedark.vim>
" packadd! onedark.vim
" let g:onedark_terminal_italics = 1
" colorscheme onedark
" let g:lightline = { 'colorscheme': 'onedark' }

" Solarized8 theme <lifepillar/vim-solarized8>
" set background=light
" colorscheme solarized8_high
" let g:lightline = { 'colorscheme': 'solarized' }


" Use Powerline-style separators in Lightline
let g:lightline.separator = { 'left': '', 'right': '' }
let g:lightline.subseparator = { 'left': '', 'right': '' }


"-----------------------------------------------------------------------------
" Mappings
"-----------------------------------------------------------------------------

" Exit insert mode by pressing 'j' twice
inoremap jj <Esc>

" Alternatively, exit insert mode by pressing the 'j' and 'k' keys
" simultaneously
" inoremap jk <Esc>
" inoremap kj <Esc>

" Set 'j' and 'k' to move by screen lines, not true lines
" (If you use relative line numbers, this may be more trouble than it's worth)
" noremap j gj
" noremap k gk

" Map Y to act like D and C, i.e. 'y$' rather than the default 'yy' 
map Y y$

" The following pair of commands is a subset of Tim Pope's Unimpaired 
" plugin <tpope/vim-unimpaired>
" Insert a newline before or after the cursor with `[<Space>` and
" `[<Space>`, respectively
nnoremap <silent> [<space>  :<c-u>put!=repeat([''],v:count)<bar>']+1<cr>
nnoremap <silent> ]<space>  :<c-u>put =repeat([''],v:count)<bar>'[-1<cr>


"-----------------------------------------------------------------------------
" Scripts
"-----------------------------------------------------------------------------

" The following script allows you to assign the same value to tabstop,
" softtabstop and shiftwidth simultaneously.
" To invoke the command, run " :Stab " in Normal mode.
" From http://vimcasts.org/episodes/tabs-and-spaces/

command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

" ~/.vim/vimrc
" Author: Dan Murphy

"----------------------------------------------------------------------
" Essential features and options
"----------------------------------------------------------------------

" Turn off Vi compatibility
" To avoid unintended side effects, `nocompatible` should not be set twice
if &compatible
    set nocompatible
endif

" Disable modelines as a security precaution
set modelines=0
set nomodeline

" Use the space key as our leader. Put this near the top of your vimrc
let mapleader = "\<Space>"

" Attempt to determine the type of a file based on its name and 
" possibly its contents. Use this to allow intelligent auto-indenting
" for each filetype, and for plugins that are filetype specific.
filetype indent plugin on

" Tab autocomplete in command mode
set wildmenu

" Use case-insensitive search, except when using capital letters
set ignorecase smartcase

" Highlight searches (use <C-L> to temporarily turn off highlighting;
" see the mapping of <C-L> below)
" set hlsearch

" Highlight matches only while searching
augroup vimrc-incsearch-highlight
    autocmd!
    autocmd CmdlineEnter /,\? :set hlsearch
    autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Show search results as you type
set incsearch

" Backspace deletes like most programs in insert mode
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled,
" keep the same indent as the line you're currently on.
" Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Remove comment leader when joining commented lines
set formatoptions+=j


"----------------------------------------------------------------------
" Appearance and interface options
"----------------------------------------------------------------------

" (Visually) wrap long lines, breaking at word boundaries
" Use `breakat` to specify the characters that can cause a line break
set wrap linebreak

" When the `wrap` option is off, show arrows if line continues
" leftwards/rightwards
" set listchars+=precedes:←,extends:→               

" Display (relative) line numbers
set number
" set relativenumber

" Display the cursor position
set ruler 

" Always display the status line, even if only one window is displayed
set laststatus=2

" Set the command window height to 2 lines, to avoid many cases of
" having to "press <Enter> to continue"
set cmdheight=2

" Keep some lines and columns visible around the cursor
set scrolloff=4
set sidescrolloff=5

" Use visual (instead of audible) bell
set visualbell

" Instead of failing a command because of unsaved changes, raise a
" dialogue asking if you wish to save changed files.
set confirm

" Show partial commands in the last line of the screen
set showcmd

" If using the lightline plugin, you don't need Vim to display the mode
" on the last line
set noshowmode


"----------------------------------------------------------------------
" Color and syntax highlighting
"----------------------------------------------------------------------

" These lines should make colors display correctly when running Vim
" within true-color (24-bit) terminals
if (has("termguicolors"))
  set termguicolors
endif

" Enable syntax highlighting (colors)
syntax on


" flattened theme <https://github.com/romainl/flattened>
" packadd! flattened
" colorscheme flattened_dark

" neodark theme <https://github.com/KeitaNakamura/neodark.vim>
" packadd! neodark.vim
" let g:neodark#background = '#202020'    " Darker background
" let g:neodark#use_256color = 1    " 256-color
" colorscheme neodark

" onedark theme <https://github.com/joshdick/onedark.vim>
packadd! onedark.vim
colorscheme onedark

" palenight theme <https://github.com/drewtempelmeyer/palenight.vim>
" packadd! palenight.vim
" set background=dark
" colorscheme palenight

" solarized8 theme <https://github.com/lifepillar/vim-solarized8>
" set background=dark
" colorscheme solarized8

" vim-one theme <https://github.com/rakr/vim-one>
" set background=dark
" let g:one_allow_italics = 1
" colorscheme one

" Set color scheme for the lightline plugin
" For the themes above, use flattened_dark, neodark, onedark, palenight,
" solarized; when no matching theme is available, I like Tomorrow_Night 
let g:lightline = { 'colorscheme': 'onedark' }

" Showcase comments in italics
highlight Comment cterm=italic gui=italic


"----------------------------------------------------------------------
" Filetype-specific options
"----------------------------------------------------------------------

" In general, filetype-specific settings should be placed in separate files,
" e.g. `~/.vim/ftplugin/python.vim` or `~/.vim/after/ftplugin/python.vim`
"
" Here, we set some defaults for when no filetype is detected, suitable for
" plain text, (La)TeX or Markdown

" For plain text and Markdown, turn on spell checking, using Canadian English
autocmd FileType markdown setlocal spell spelllang=en_ca,en_us
autocmd FileType text setlocal spell spelllang=en_ca,en_us

" Use soft tabs (insert spaces instead of tab characters)
set expandtab smarttab

" Set tab stops and indentation at 4 spaces
set shiftwidth=4 tabstop=4 softtabstop=4


"----------------------------------------------------------------------
" Mappings
"----------------------------------------------------------------------

" Exit insert mode by pressing the 'j' and 'k' keys simultaneously,
" or alternatively, by pressing 'j' twice
" inoremap jk <Esc>
" inoremap kj <Esc>
inoremap jj <Esc>

" Set 'j' and 'k' to move by screen lines, not true lines
noremap j gj
noremap k gk

" Map Y to act like D and C, i.e. 'y$' rather than the default 'yy' 
map Y y$

" The following pair of commands is a subset of Tim Pope's Unimpaired 
" plugin <https://github.com/tpope/vim-unimpaired>
" Insert a newline before or after the cursor with `[<Space>` and `[<Space>`,
" respectively
nnoremap <silent> [<space>  :<c-u>put!=repeat([''],v:count)<bar>']+1<cr>
nnoremap <silent> ]<space>  :<c-u>put =repeat([''],v:count)<bar>'[-1<cr>

"---------------------------------------------------------------------
" Scripts
"---------------------------------------------------------------------

" The following script allows you to assign the same value to tabstop,
" softtabstop and shiftwidth simultaneously.
" To invoke the command, run " :Stab " in Normal mode.
" From http://vimcasts.org/episodes/tabs-and-spaces/

command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
